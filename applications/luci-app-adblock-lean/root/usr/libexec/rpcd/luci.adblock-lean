#!/bin/sh

# TechRef: https://openwrt.org/docs/techref/rpcd
# TESTS
# ubus -v list luci.adblock-lean
# ubus -v call luci.adblock-lean getStatus
# ubus -v call luci.adblock-lean install

# Global variables coming from adblock-lean
luci_bad_conf_format=-1		# 1 = Current config format is older than default config version
luci_conf_fixes=""			# \n separated list of necessary config fixes
luci_curr_config_format=-1	# Config format read from the config file
luci_def_config_format=-1	# Config format supported by adblock-lean
luci_dnsmasq_status=-1		# 0 = Running, 1 = Not running, 2 = Test lookup failed, 3 = Test lookup returned 0.0.0.0
luci_errors=""				# Error messages passed in call to reg_failure()
luci_good_line_count=-1		# Total number of unique lines in the merged blocklist
luci_legacy_entries=""		# \n separated list of config entries that aren't double-quoted
luci_missing_entries=""		# \n separated list of entries that aren't in the config file (and should be added)
luci_missing_keys=""		# \n separated list of keys that aren't in the config file (and should be added)
luci_pid_action=""			# Other (locking) action currently being performed (blocklist_status_rpc should be 2 for this to have a value)
luci_unexp_entries=""		# \n separated list of config entries that are no longer used (and should be removed)
luci_unexp_keys=""			# \n separated list of config keys that are no longer used (and should be removed)
luci_upd_config_format=-1   # Config format supported by adblock-lean update (when luci_update_status=1)
luci_update_status=-1		# 0 = Up-to-date, 1 = Update available, 2 = Error checking

# Global variables set in this RPC script
blocklist_age_s_rpc=-1		# Number of seconds since the blocklist was last modified
blocklist_status_rpc=-1		# 0 = Active, 1 = Locking error, 2 = Other action being performed, 3 = Paused, 4 = Not active
config_status_rpc=-1		# 0 = OK, 1 = Manual fix or reset needed, 2 = Update needed (auto or manual)
laabl_package_info=""		# Result of opk info luci-app-adblock-lean, which includes version information used to detect updates
service_status_rpc=-1		# 0 = Enabled, 1 = Disabled, 2 = Not installed

# Source the AdBlock Lean script if it exists, or set service_status_rpc to 2=Not installed if it doesn't exist
adblockLeanFilename="/etc/init.d/adblock-lean"
if [ -s "$adblockLeanFilename" ]; then
	. "$adblockLeanFilename"
else
	service_status_rpc=2
fi

# source jshn shell library
. /usr/share/libubox/jshn.sh

# RPC scripts must output a JSON payload, so ensure msgs_dest is set to /dev/null (AdBlock Lean will do this for actual
# RPC calls, but it won't do it when testing the RPC script via the CLI, hence why we set it here)
msgs_dest="/dev/null"

# AdBlock Lean will call this function before exiting, so for example the flow for a getStatus call looks like:
# RPC call getStatus -> get_status_rpc() -> status() -> abl_luci_exit() -> ??? -> exit
# This means get_status_rpc() can only initiate the call to status(), but not actually output anything because the call
# from get_status_rpc() to status() never returns to get_status_rpc()
# And this means abl_luci_exit() needs to determine which print method to call to return the correct JSON payload
# (ie what to do in the ??? above), so we use a previously-set $exit_action variable to determine this
abl_luci_exit() {
	case "$exit_action" in
		getStatus)
			print_status_rpc "$1"
			;;
	esac
}

# Call AdBlock Lean's parse_config() function to determine whether the config file needs updating
check_config_rpc() {
	# If AdBlock Lean is installed, then we want to call its parse_config method
	if [ "$service_status_rpc" != 2 ]
	then
		parse_config "/root/adblock-lean/config"
		config_status_rpc="$?"
	fi

	# Unlike status(), parse_config() does not exit at the end, so we can return our json payload from here
	# Return a json response
	json_init
	json_add_string "bad_conf_format" "$luci_bad_conf_format"
	json_add_string "conf_fixes" "$luci_conf_fixes"
	json_add_string "curr_config_format" "$luci_curr_config_format"
	json_add_string "def_config_format" "$luci_def_config_format"
	json_add_string "legacy_entries" "$luci_legacy_entries"
	json_add_string "missing_entries" "$luci_missing_entries"
	json_add_string "missing_keys" "$luci_missing_keys"
	json_add_string "unexp_entries" "$luci_unexp_entries"
	json_add_string "unexp_keys" "$luci_unexp_keys"
	json_add_string "config_status" "$config_status_rpc"
	json_dump
}

# Call AdBlock Lean's status() function to determine whether the blocklist is active, whether dnsmasq is functioning
# correctly, etc.
get_status_rpc() {
	# If AdBlock Lean is installed, then we want to call its status method
	if [ "$service_status_rpc" != 2 ]
	then
		status
	fi

	# AdBlock Lean exits at the end of all functions, so if status is called above then we won't get here
	# BUT if AdBlock Lean is not installed, then we will get here, and we need to manually call print_status_rpc()
	print_status_rpc
}

install_rpc() {
	# Whilst AdBlock Lean does not require any dependencies to run, its performance can be improved by installing gawk and coreutils-sort
	opkg update
	opkg install gawk coreutils-sort

	# Example installation steps:
	# TODOX Needs error checking
	wget https://raw.githubusercontent.com/lynxthecat/adblock-lean/main/adblock-lean -O /etc/init.d/adblock-lean
	chmod +x /etc/init.d/adblock-lean
	service adblock-lean gen_config # generates default config in /root/adblock-lean/config
	#vi /root/adblock-lean/config # modify default config as required
	uci add_list dhcp.@dnsmasq[0].addnmount='/bin/busybox' && uci commit # to enable use of compressed blocklist
	service adblock-lean enable

	# RPC calls abort after 30 seconds, so can't do a 'service adblock-lean start' here.  Which is probably a good thing,
	# user should be presented with the Overview page where they can change the settings they want to change first anyway.
}

# Perform some additional status-related checks, and then output the JSON response payload
print_status_rpc() {
	# Only perform the additional checks if AdBlock Lean is installed
	if [ "$service_status_rpc" != 2 ]
	then
		# We already called status in the get_status_rpc() method, so now we just need to grab the return value, which is passed
		# in as an arg to the print_status_rpc() function
		blocklist_status_rpc="$1"

		# Get additional details if the dnsmasq checks passed
		if [ "$luci_dnsmasq_status" = 0 ]
		then
			# luci_good_line_count will be something like "774775 /tmp/dnsmasq.d/blocklist," and we just want the line count
			luci_good_line_count=$(echo "$luci_good_line_count" | awk '{print $1;}')

			# Get the seconds since the blocklist was last modified, so we can tell if the scheduled task is running correctly
			blocklist_age_s_rpc=$(($(date +%s) - $(date -r /tmp/dnsmasq.d/blocklist +%s 2>/dev/null || date -r /tmp/dnsmasq.d/.blocklist.gz +%s 2>/dev/null)))
		fi

		# get enabled/disabled status
		case $(service 2>/dev/null | grep "adblock-lean") in 
			*disabled*)
				service_status_rpc=1
				;;
			*enabled*)
				service_status_rpc=0
				;;
		esac
	fi

	# Get luci-app-adblock-lean info
	laabl_package_info=$(opkg info luci-app-adblock-lean)

	# Return a json response
	json_init
	json_add_int "service_status" "$service_status_rpc"
	json_add_int "dnsmasq_status" "$luci_dnsmasq_status"
	json_add_int "blocklist_status" "$blocklist_status_rpc"
	json_add_int "blocklist_line_count" "$luci_good_line_count"
	json_add_int "blocklist_age_s" "$blocklist_age_s_rpc"
	json_add_int "update_status" "$luci_update_status"
	json_add_int "update_config_format" "$luci_upd_config_format"
	json_add_string "pid_action" "$luci_pid_action"
	json_add_string "errors" "$luci_errors"
	json_add_string "laabl_package_info" "$laabl_package_info"
	json_dump
}

# Call AdBlock Lean's gen_config() function to reset the broken config file
reset_config_rpc() {
	# If AdBlock Lean is installed, then we want to call its gen_config method
	if [ "$service_status_rpc" != 2 ]
	then
		gen_config
	fi

	# Not sure if gen_config exits, but it doesn't really matter either way 
	# because luci will reload after resetConfig returns
}

# Call AdBlock Lean's load_config() function to update the outdated config file
update_config_rpc() {
	# If AdBlock Lean is installed, then we want to call its load_config method
	if [ "$service_status_rpc" != 2 ]
	then
		load_config "-f"
	fi

	# Not sure if load_config exits, but it doesn't really matter either way 
	# because luci will reload after updateConfig returns
}

# Check whether this is a "list" or "call" request
case "$1" in
	list)
		printf '{\n'
		printf '	"checkConfig": { },\n'
		printf '	"getStatus": { },\n'
		printf '	"install": { },\n'
		printf '	"resetConfig": { },\n'
		printf '	"updateConfig": { }\n'
		printf '}\n'
		;;
	call)
		# Store the call target for use in abl_luci_exit(), then check which
		# function to call, and call it
		exit_action="$2"
		case "$2" in
			checkConfig)
				check_config_rpc
				;;
			getStatus)
				get_status_rpc
				;;
			install)
				install_rpc
				;;
			resetConfig)
				reset_config_rpc
				;;
			updateConfig)
				update_config_rpc
				;;
		esac
	;;
esac
